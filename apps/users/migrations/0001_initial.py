# Generated by Django 5.2.7 on 2025-10-30 03:03

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('username', models.CharField(max_length=150, unique=True)),
                ('last_activity', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Interest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'db_table': 'interests',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('bio', models.TextField(blank=True, help_text='Short biography or description')),
                ('birth_date', models.DateField(blank=True, help_text='Date of birth', null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=2)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('relationship_goal', models.CharField(blank=True, choices=[('casual', 'Casual Dating'), ('serious', 'Serious Relationship'), ('friendship', 'Friendship'), ('marriage', 'Marriage')], max_length=20)),
                ('looking_for_gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], help_text='Gender you are looking for', max_length=2)),
                ('min_age_preference', models.PositiveIntegerField(blank=True, default=18, validators=[django.core.validators.MinValueValidator(18), django.core.validators.MaxValueValidator(100)])),
                ('max_age_preference', models.PositiveIntegerField(blank=True, default=100, validators=[django.core.validators.MinValueValidator(18), django.core.validators.MaxValueValidator(100)])),
                ('max_distance_km', models.PositiveIntegerField(blank=True, default=50, help_text='Maximum distance in kilometers for matches')),
                ('profile_completion_percentage', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('total_matches', models.PositiveIntegerField(default=0)),
                ('total_messages_sent', models.PositiveIntegerField(default=0)),
                ('profile_views', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'profiles',
            },
        ),
        migrations.CreateModel(
            name='ProfilePhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='profile_photos/')),
                ('is_primary', models.BooleanField(default=False)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='users.profile')),
            ],
        ),
        migrations.CreateModel(
            name='ProfileInterest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passion_level', models.PositiveIntegerField(default=1, help_text='How passionate the user is about this interest (1â€“5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('interest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profiles', to='users.interest')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interests', to='users.profile')),
            ],
            options={
                'db_table': 'profile_interests',
            },
        ),
        migrations.AddIndex(
            model_name='profile',
            index=models.Index(fields=['gender', 'birth_date'], name='profiles_gender_bbcb66_idx'),
        ),
        migrations.AddIndex(
            model_name='profile',
            index=models.Index(fields=['city', 'country'], name='profiles_city_90b13a_idx'),
        ),
        migrations.AddIndex(
            model_name='profile',
            index=models.Index(fields=['profile_completion_percentage'], name='profiles_profile_4a68c3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='profileinterest',
            unique_together={('profile', 'interest')},
        ),
    ]
